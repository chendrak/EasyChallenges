using System;
using System.Linq;
using Microsoft.CodeAnalysis;

namespace EasyChallenges.EnumGenerator
{
    public static class SyntaxBuilderExtensions
    {
        private const string AutoGeneratedComment = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

        public static void AddSource(this SyntaxBuilder builder, GeneratorExecutionContext context) =>
            context.AddSource(builder);
        public static void AddSource(this GeneratorExecutionContext context, SyntaxBuilder builder)
        {
            if (builder.ClassName == null)
            {
                builder.ClassName = Guid.NewGuid().ToString("n");
            }
            context.AddSource($"{builder.ClassName}.g.cs", builder.EndAllBlocks().Format().ToString());
        }
        public static SyntaxBuilder FinalizeDeclaration(
            this SyntaxBuilder builder,
            string @namespace,
            params string[] usingStatements
            )
        {
            // These are done in reverse, as prepending always adds to the start.
            if (!string.IsNullOrWhiteSpace(@namespace))
            {
                builder.PrependBlock($"namespace {@namespace}");
            }

            builder.PrependLine();
            foreach (var @using in usingStatements.Reverse())
            {
                builder.PrependLine($"using {@using};");
            }

            return builder.PrependLine(AutoGeneratedComment.TrimStart());
        }

        public static SyntaxBuilder ToSyntaxBuilder(this string str) => SyntaxBuilder.FromString(str);

        public static SyntaxBuilder WithClassName(this SyntaxBuilder builder, string className)
        {
            builder.ClassName = className;
            return builder;
        }
    }
}
